/*

	设计原则 & 编程技巧
	通常有: 单一职责原则, 里氏替换原则, 依赖倒置原则, 接口隔离原则, 合成复用原则, 最少知识原则



	*单一职责原则(SRP原则) => 一个对象(方法)只做一件事情

		- 涉及: 代理模式, 迭代器模式, 单例模式, 装饰者模式

		- 何时分离职责: 
			a. 随着需求变化, 两个职责总是同时变化, 那就不必分离它们(eg: ajax xhr创建&xhr发送请求)
			b. 职责的变化轴线仅当它们确定会发生变化时才具有意义, 即使两个职责已经耦合一起, 但它们没有发生改变征兆即没必要分离

		- 优缺点: 
			pros. 降低了单个类或者对象复杂度, 按照职责把对象分解成更小粒度, 有助于代码的复用, 也有利于单元测试. 当一个职责变更不影响其他
			cons. 增加编码复杂度, 职责分解成更小粒度之后, 实际上也增大了对象之间相互联系的难度

			
	
	*最少知识原则 => 一个实体应当尽可能少地与其他实体发生相互作用

		- 涉及: 中介者模式, 外观模式

		- 建议: 该原则要求设计程序时, 应当尽量减少对象间交互. 如两个对象间不必彼此通信, 那两个对象就不要发生直接相互联系.
		常见做法为引入第三方对象, 来承担这些对象之间通信作用. 如对象需要向另一个对象发起请求, 可通过第三方来实现即可. 

		- 封装在最少知识原则中的体现:
			封装在很大程度上表达的是数据的隐藏. 一个模块或者对象可以将内部数据或实现细节隐藏起来, 只暴露必要的接口API供外界使用. 
			对象之间难免联系, 当一个对象必须引用另一个对象的时候, 只暴露必要接口, 让对象之间联系限制在最小范围内. 



	*开放-封闭原则 => 软件实体(类, 模块, 函数)等应该是可以扩展的, 但是不可修改

		- 涉及: 发布-订阅模式, 模版方法模式, 策略模式, 代理模式, 职责链模式

		-	思想: 当需改变程序功能或新增功能时候, 可以使用增加代码的方式, 但不允许修改源代码(eg: AOP)


	


*/
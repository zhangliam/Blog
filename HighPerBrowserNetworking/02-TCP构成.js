/*

  - 三次握手

    SYN => 客户端选择一个随机序列号x, 并发送一个SYN分组, 其中可能包括TCP标志&选项
    SYN ACK => 服务器给x+1, 并选择自己的一个随机序列号y, 追加自己的标志&选项, 然后返回响应
    ACK => 客户端给x,y各+1并发送握手期间最后一个ACK分组

  
  - 拥塞预防 & 控制
  

    计算机科学链接: https://www.jsjkx.com/CN/article/openArticlePDF.jsp?id=14475


    流量控制
      预防发送端过多向接受端发起数据的控制. 否则接收端可能发生忙碌, 负载重, 缓冲区既定而无法处理.
      TCP双方都需通告自己的接收窗口rwnd(包含保存数据缓冲区空间大小信息)

  
    慢启动
      a. rwnd(通告接收窗口)大小: 第一次建立连接, 两端都会使用自身系统默认值来发送rwnd
      b. cwnd(拥塞窗口大小): 发送端对从客户端接受确认(ACK)之前可以发送数据量的限制
      
      新TCP连接传输最大数据量取rwnd & cwnd中最小值, 服务器向客户端发送4个TCP段则停下来确认, 每收到一个ACK, 慢启动算法告诉服务器将cwnd增加一个TCP段, 每次收到ACK后, 都可多发两个分组. TCP这个阶段称为“指数增长”阶段

      *RFC 6928新规定的10段(IW10),是提升用户体验以及所有TCP影响性能最简单方式, Linux中IW10是2.6版本内核默认值


    拥塞预防
      慢启动以保守的窗口初始化连接, 随后每次往返成倍提高传输数据量, 直到超过接收端流量控制窗口, 即系统配置的拥塞阀值(ssthresh)窗口, 或有分组丢失为止(cwnd > ssthresh), 此时拥塞预防算法介入. 此时cwnd增长速度减慢, 每收到一个非重复确认则令
      cwnd = cwnd + SMSS * SMSS/cwnd (SMSS为发送方最大报文长度), 如有数据包丢失将慢启动阀值设置为ssthresh=max(2,min(cwnd/2,rwnd))
      该算法把丢包作为网络拥塞标志, 如遇拥堵, 必须采取删包措施. 因此, 必须调整窗口大小, 避免造成更多包丢失, 保证网络通畅

      *比例降速(PRP) => 改进丢包后恢复速度


  - 带宽延迟积(BDP)
      数据链路的容量与其端到端延迟的乘积


  - 队首阻塞(HOL)
      顺序发送TCP请求中途有一个分组没有到达接收端, 则后续分组必须保存TCP缓冲区, 等待丢失分组重发到达接收端


  - 影响
      1. TCP三次握手增加了整整一次往返时间
      2. TCP慢启动将被应用到每个新链接
      3. TCP流量以及拥塞控制会影响所有链接吞吐量
      4. TCP吞吐量有当前拥塞窗口大小控制
    

  - 性能检查清单
      1. 服务器内核升级最新
      2. 确保cwnd大小为10(增大TCP的初始拥塞窗口)
      3. 禁用空闲后的慢启动
      4. 确保启动窗口缩放(RFC1323)
      5. 减少传输冗余数据
      6. 压缩传输数据
      7. 服务器放在离用户近的地方减少往返时间
      8. 尽最大可能重用已经建立的TCP连接







      






*/